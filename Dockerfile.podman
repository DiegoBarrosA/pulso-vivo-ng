# Podman-optimized Dockerfile for PulsoVivo Angular App
# This version is designed to work better with rootless Podman setups

# Build stage
FROM docker.io/library/node:18-alpine AS build

# Set working directory
WORKDIR /app

# Add user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S angular -u 1001

# Copy package files first for better caching
COPY --chown=angular:nodejs package*.json ./

# Install dependencies with proper permissions
USER angular
RUN npm ci --only=production --no-audit --no-fund --prefer-offline

# Copy source code
COPY --chown=angular:nodejs . .

# Accept build arguments for environment configuration
ARG INVENTORY_SERVICE_URL=http://localhost:8081/api
ARG API_GATEWAY_URL=https://erwqz80g2d.execute-api.us-east-1.amazonaws.com/api
ARG AZURE_AD_CLIENT_ID=7549ac9c-9294-4bb3-98d6-752d12b13d81
ARG AZURE_AD_AUTHORITY=https://PulsoVivo.b2clogin.com/PulsoVivo.onmicrosoft.com/B2C_1_pulso_vivo_register_and_login
ARG AZURE_AD_REDIRECT_URI=http://localhost:4200
ARG ENABLE_LOGGING=false

# Set environment variables for build
ENV INVENTORY_SERVICE_URL=$INVENTORY_SERVICE_URL
ENV API_GATEWAY_URL=$API_GATEWAY_URL
ENV AZURE_AD_CLIENT_ID=$AZURE_AD_CLIENT_ID
ENV AZURE_AD_AUTHORITY=$AZURE_AD_AUTHORITY
ENV AZURE_AD_REDIRECT_URI=$AZURE_AD_REDIRECT_URI
ENV ENABLE_LOGGING=$ENABLE_LOGGING

# Build the application for Docker (optimized build with proxy support)
RUN npm run build:docker

# Production stage
FROM docker.io/library/nginx:alpine

# Add user for security
RUN addgroup -g 1001 -S nginx && \
    adduser -S nginx -u 1001 -G nginx

# Copy built application from build stage
COPY --from=build --chown=nginx:nginx /app/dist/docker/browser /usr/share/nginx/html

# Create nginx configuration from template
COPY --chown=nginx:nginx nginx.conf.template /etc/nginx/templates/default.conf.template

# Create directories for nginx
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run /etc/nginx/conf.d

# Create environment script for runtime configuration
RUN mkdir -p /usr/share/nginx/html/assets && \
    echo '#!/bin/sh' > /docker-entrypoint.d/30-envsubst.sh && \
    echo 'envsubst < /usr/share/nginx/html/assets/env.template.js > /usr/share/nginx/html/assets/env.js' >> /docker-entrypoint.d/30-envsubst.sh && \
    chmod +x /docker-entrypoint.d/30-envsubst.sh

# Create environment template file
RUN echo 'window.env = {' > /usr/share/nginx/html/assets/env.template.js && \
    echo '  INVENTORY_SERVICE_URL: "${INVENTORY_SERVICE_URL}",' >> /usr/share/nginx/html/assets/env.template.js && \
    echo '  API_GATEWAY_URL: "${API_GATEWAY_URL}",' >> /usr/share/nginx/html/assets/env.template.js && \
    echo '  AZURE_AD_CLIENT_ID: "${AZURE_AD_CLIENT_ID}",' >> /usr/share/nginx/html/assets/env.template.js && \
    echo '  AZURE_AD_AUTHORITY: "${AZURE_AD_AUTHORITY}",' >> /usr/share/nginx/html/assets/env.template.js && \
    echo '  AZURE_AD_REDIRECT_URI: "${AZURE_AD_REDIRECT_URI}",' >> /usr/share/nginx/html/assets/env.template.js && \
    echo '  ENABLE_LOGGING: "${ENABLE_LOGGING}"' >> /usr/share/nginx/html/assets/env.template.js && \
    echo '};' >> /usr/share/nginx/html/assets/env.template.js

# Set proper ownership
RUN chown -R nginx:nginx /usr/share/nginx/html

# Set default environment variables
ENV INVENTORY_SERVICE_URL=http://localhost:8081/api
ENV API_GATEWAY_URL=https://erwqz80g2d.execute-api.us-east-1.amazonaws.com/api
ENV AZURE_AD_CLIENT_ID=7549ac9c-9294-4bb3-98d6-752d12b13d81
ENV AZURE_AD_AUTHORITY=https://PulsoVivo.b2clogin.com/PulsoVivo.onmicrosoft.com/B2C_1_pulso_vivo_register_and_login
ENV AZURE_AD_REDIRECT_URI=http://localhost:4200
ENV ENABLE_LOGGING=false

# Use non-root user
USER nginx

# Expose port 8080 instead of 80 for rootless
EXPOSE 8080

# Custom nginx configuration for rootless operation
RUN echo 'server {' > /etc/nginx/conf.d/default.conf && \
    echo '    listen 8080;' >> /etc/nginx/conf.d/default.conf && \
    echo '    server_name localhost;' >> /etc/nginx/conf.d/default.conf && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    index index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # API proxy to AWS API Gateway' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /api/ {' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_pass https://erwqz80g2d.execute-api.us-east-1.amazonaws.com/api/;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header Host erwqz80g2d.execute-api.us-east-1.amazonaws.com;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_ssl_server_name on;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_ssl_verify off;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header "Access-Control-Allow-Origin" "*" always;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header "Access-Control-Allow-Methods" "GET, POST, PUT, DELETE, OPTIONS" always;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header "Access-Control-Allow-Headers" "Authorization, Content-Type" always;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Handle Angular routing' >> /etc/nginx/conf.d/default.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Health check' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /health {' >> /etc/nginx/conf.d/default.conf && \
    echo '        return 200 "healthy";' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Content-Type text/plain;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '}' >> /etc/nginx/conf.d/default.conf

# Create nginx.conf for rootless operation
RUN echo 'pid /tmp/nginx.pid;' > /etc/nginx/nginx.conf && \
    echo 'error_log /dev/stderr;' >> /etc/nginx/nginx.conf && \
    echo 'events {' >> /etc/nginx/nginx.conf && \
    echo '    worker_connections 1024;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf && \
    echo 'http {' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
    echo '    default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
    echo '    access_log /dev/stdout;' >> /etc/nginx/nginx.conf && \
    echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
    echo '    tcp_nopush on;' >> /etc/nginx/nginx.conf && \
    echo '    tcp_nodelay on;' >> /etc/nginx/nginx.conf && \
    echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
    echo '    gzip on;' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/conf.d/*.conf;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf

# Start nginx
CMD ["nginx", "-g", "daemon off;"]